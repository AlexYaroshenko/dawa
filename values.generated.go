// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package dawa

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	"reflect"
	"runtime"
)

const (
	codecSelferC_UTF81474         = 1
	codecSelferC_RAW1474          = 0
	codecSelverValueTypeArray1474 = 10
	codecSelverValueTypeMap1474   = 9
)

var (
	codecSelferBitsize1474                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1474 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1474 struct{}

func init() {
	if codec1978.GenVersion != 1 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			1, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
	}
}

func (x *Postnummer) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep1 := !z.EncBinary()
		const yyr1 bool = false
		var yyq1 [5]bool
		if yyr1 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(5)
		} else {
			var yynn1 int = 5
			for _, b := range yyq1 {
				if b {
					yynn1++
				}
			}
			r.EncodeMapStart(yynn1)
		}
		if yyr1 || z.EncBasicHandle().StructToArray {
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("Href"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		}
		if yyr1 || z.EncBasicHandle().StructToArray {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Kommuner == nil {
				r.EncodeNil()
			} else {
				h.encSliceKommune([]Kommune(x.Kommuner), e)
			}
		} else {
			if yysep1 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Kommuner"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			if x.Kommuner == nil {
				r.EncodeNil()
			} else {
				h.encSliceKommune([]Kommune(x.Kommuner), e)
			}
		}
		if yyr1 || z.EncBasicHandle().StructToArray {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		} else {
			if yysep1 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Navn"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		}
		if yyr1 || z.EncBasicHandle().StructToArray {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Nr))
		} else {
			if yysep1 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Nr"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Nr))
		}
		if yyr1 || z.EncBasicHandle().StructToArray {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Stormodtageradresser == nil {
				r.EncodeNil()
			} else {
				z.EncFallback(x.Stormodtageradresser)
			}
		} else {
			if yysep1 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Stormodtageradresser"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			if x.Stormodtageradresser == nil {
				r.EncodeNil()
			} else {
				z.EncFallback(x.Stormodtageradresser)
			}
		}
		if yysep1 {
			if yyr1 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Postnummer) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl7 := r.ReadMapStart()
		if yyl7 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl7, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl7 := r.ReadArrayStart()
		if yyl7 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl7, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *Postnummer) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj8 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		if !yyhl8 {
			r.ReadMapKVSeparator()
		}
		switch yys8 {
		case "href":
			if r.TryDecodeAsNil() {
				x.Href = ""
			} else {
				x.Href = r.DecodeString()
			}
		case "kommuner":
			if r.TryDecodeAsNil() {
				x.Kommuner = nil
			} else {
				yyv10 := &x.Kommuner
				h.decSliceKommune((*[]Kommune)(yyv10), d)
			}
		case "navn":
			if r.TryDecodeAsNil() {
				x.Navn = ""
			} else {
				x.Navn = r.DecodeString()
			}
		case "nr":
			if r.TryDecodeAsNil() {
				x.Nr = ""
			} else {
				x.Nr = r.DecodeString()
			}
		case "stormodtageradresser":
			if r.TryDecodeAsNil() {
				x.Stormodtageradresser = nil
			} else {
				yyv13 := &x.Stormodtageradresser
				z.DecFallback(yyv13, true)
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	if !yyhl8 {
		r.ReadMapEnd()
	}
}

func (x *Postnummer) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Href = ""
	} else {
		x.Href = r.DecodeString()
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Kommuner = nil
	} else {
		yyv16 := &x.Kommuner
		h.decSliceKommune((*[]Kommune)(yyv16), d)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Navn = ""
	} else {
		x.Navn = r.DecodeString()
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Nr = ""
	} else {
		x.Nr = r.DecodeString()
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Stormodtageradresser = nil
	} else {
		yyv19 := &x.Stormodtageradresser
		z.DecFallback(yyv19, true)
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		if yyj14 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Adresse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep20 := !z.EncBinary()
		const yyr20 bool = false
		var yyq20 [9]bool
		if yyr20 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(9)
		} else {
			var yynn20 int = 9
			for _, b := range yyq20 {
				if b {
					yynn20++
				}
			}
			r.EncodeMapStart(yynn20)
		}
		if yyr20 || z.EncBasicHandle().StructToArray {
			x.Adgangsadresse.CodecEncodeSelf(e)
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("Adgangsadresse"))
			if yysep20 {
				r.EncodeMapKVSeparator()
			}
			x.Adgangsadresse.CodecEncodeSelf(e)
		}
		if yyr20 || z.EncBasicHandle().StructToArray {
			if yysep20 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Adressebetegnelse))
		} else {
			if yysep20 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Adressebetegnelse"))
			if yysep20 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Adressebetegnelse))
		}
		if yyr20 || z.EncBasicHandle().StructToArray {
			if yysep20 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Dør))
		} else {
			if yysep20 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Dør"))
			if yysep20 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Dør))
		}
		if yyr20 || z.EncBasicHandle().StructToArray {
			if yysep20 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Etage))
		} else {
			if yysep20 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Etage"))
			if yysep20 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Etage))
		}
		if yyr20 || z.EncBasicHandle().StructToArray {
			if yysep20 {
				r.EncodeArrayEntrySeparator()
			}
			x.Historik.CodecEncodeSelf(e)
		} else {
			if yysep20 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Historik"))
			if yysep20 {
				r.EncodeMapKVSeparator()
			}
			x.Historik.CodecEncodeSelf(e)
		}
		if yyr20 || z.EncBasicHandle().StructToArray {
			if yysep20 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		} else {
			if yysep20 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Href"))
			if yysep20 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		}
		if yyr20 || z.EncBasicHandle().StructToArray {
			if yysep20 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.ID))
		} else {
			if yysep20 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("ID"))
			if yysep20 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.ID))
		}
		if yyr20 || z.EncBasicHandle().StructToArray {
			if yysep20 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kvhx))
		} else {
			if yysep20 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Kvhx"))
			if yysep20 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kvhx))
		}
		if yyr20 || z.EncBasicHandle().StructToArray {
			if yysep20 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Status))
		} else {
			if yysep20 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Status"))
			if yysep20 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Status))
		}
		if yysep20 {
			if yyr20 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Adresse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl30 := r.ReadMapStart()
		if yyl30 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl30, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl30 := r.ReadArrayStart()
		if yyl30 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl30, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *Adresse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys31Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys31Slc
	var yyhl31 bool = l >= 0
	for yyj31 := 0; ; yyj31++ {
		if yyhl31 {
			if yyj31 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj31 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys31Slc = r.DecodeBytes(yys31Slc, true, true)
		yys31 := string(yys31Slc)
		if !yyhl31 {
			r.ReadMapKVSeparator()
		}
		switch yys31 {
		case "adgangsadresse":
			if r.TryDecodeAsNil() {
				x.Adgangsadresse = AdgangsAdresse{}
			} else {
				yyv32 := &x.Adgangsadresse
				yyv32.CodecDecodeSelf(d)
			}
		case "adressebetegnelse":
			if r.TryDecodeAsNil() {
				x.Adressebetegnelse = ""
			} else {
				x.Adressebetegnelse = r.DecodeString()
			}
		case "dør":
			if r.TryDecodeAsNil() {
				x.Dør = ""
			} else {
				x.Dør = r.DecodeString()
			}
		case "etage":
			if r.TryDecodeAsNil() {
				x.Etage = ""
			} else {
				x.Etage = r.DecodeString()
			}
		case "historik":
			if r.TryDecodeAsNil() {
				x.Historik = Historik{}
			} else {
				yyv36 := &x.Historik
				yyv36.CodecDecodeSelf(d)
			}
		case "href":
			if r.TryDecodeAsNil() {
				x.Href = ""
			} else {
				x.Href = r.DecodeString()
			}
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				x.ID = r.DecodeString()
			}
		case "kvhx":
			if r.TryDecodeAsNil() {
				x.Kvhx = ""
			} else {
				x.Kvhx = r.DecodeString()
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = 0
			} else {
				x.Status = int(r.DecodeInt(codecSelferBitsize1474))
			}
		default:
			z.DecStructFieldNotFound(-1, yys31)
		} // end switch yys31
	} // end for yyj31
	if !yyhl31 {
		r.ReadMapEnd()
	}
}

func (x *Adresse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj41 int
	var yyb41 bool
	var yyhl41 bool = l >= 0
	yyj41++
	if yyhl41 {
		yyb41 = yyj41 > l
	} else {
		yyb41 = r.CheckBreak()
	}
	if yyb41 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Adgangsadresse = AdgangsAdresse{}
	} else {
		yyv42 := &x.Adgangsadresse
		yyv42.CodecDecodeSelf(d)
	}
	yyj41++
	if yyhl41 {
		yyb41 = yyj41 > l
	} else {
		yyb41 = r.CheckBreak()
	}
	if yyb41 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Adressebetegnelse = ""
	} else {
		x.Adressebetegnelse = r.DecodeString()
	}
	yyj41++
	if yyhl41 {
		yyb41 = yyj41 > l
	} else {
		yyb41 = r.CheckBreak()
	}
	if yyb41 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Dør = ""
	} else {
		x.Dør = r.DecodeString()
	}
	yyj41++
	if yyhl41 {
		yyb41 = yyj41 > l
	} else {
		yyb41 = r.CheckBreak()
	}
	if yyb41 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Etage = ""
	} else {
		x.Etage = r.DecodeString()
	}
	yyj41++
	if yyhl41 {
		yyb41 = yyj41 > l
	} else {
		yyb41 = r.CheckBreak()
	}
	if yyb41 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Historik = Historik{}
	} else {
		yyv46 := &x.Historik
		yyv46.CodecDecodeSelf(d)
	}
	yyj41++
	if yyhl41 {
		yyb41 = yyj41 > l
	} else {
		yyb41 = r.CheckBreak()
	}
	if yyb41 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Href = ""
	} else {
		x.Href = r.DecodeString()
	}
	yyj41++
	if yyhl41 {
		yyb41 = yyj41 > l
	} else {
		yyb41 = r.CheckBreak()
	}
	if yyb41 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		x.ID = r.DecodeString()
	}
	yyj41++
	if yyhl41 {
		yyb41 = yyj41 > l
	} else {
		yyb41 = r.CheckBreak()
	}
	if yyb41 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Kvhx = ""
	} else {
		x.Kvhx = r.DecodeString()
	}
	yyj41++
	if yyhl41 {
		yyb41 = yyj41 > l
	} else {
		yyb41 = r.CheckBreak()
	}
	if yyb41 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = 0
	} else {
		x.Status = int(r.DecodeInt(codecSelferBitsize1474))
	}
	for {
		yyj41++
		if yyhl41 {
			yyb41 = yyj41 > l
		} else {
			yyb41 = r.CheckBreak()
		}
		if yyb41 {
			break
		}
		if yyj41 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj41-1, "")
	}
	r.ReadArrayEnd()
}

func (x *AdgangsAdresse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep51 := !z.EncBinary()
		const yyr51 bool = false
		var yyq51 [21]bool
		if yyr51 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(21)
		} else {
			var yynn51 int = 21
			for _, b := range yyq51 {
				if b {
					yynn51++
				}
			}
			r.EncodeMapStart(yynn51)
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			x.DDKN.CodecEncodeSelf(e)
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("DDKN"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			x.DDKN.CodecEncodeSelf(e)
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			x.Adgangspunkt.CodecEncodeSelf(e)
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Adgangspunkt"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			x.Adgangspunkt.CodecEncodeSelf(e)
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			x.Ejerlav.CodecEncodeSelf(e)
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Ejerlav"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			x.Ejerlav.CodecEncodeSelf(e)
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.EsrEjendomsNr))
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("EsrEjendomsNr"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.EsrEjendomsNr))
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			x.Historik.CodecEncodeSelf(e)
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Historik"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			x.Historik.CodecEncodeSelf(e)
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Href"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Husnr))
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Husnr"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Husnr))
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.ID))
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("ID"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.ID))
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			x.Kommune.CodecEncodeSelf(e)
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Kommune"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			x.Kommune.CodecEncodeSelf(e)
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kvh))
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Kvh"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kvh))
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Matrikelnr))
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Matrikelnr"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Matrikelnr))
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			x.Opstillingskreds.CodecEncodeSelf(e)
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Opstillingskreds"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			x.Opstillingskreds.CodecEncodeSelf(e)
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			x.Politikreds.CodecEncodeSelf(e)
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Politikreds"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			x.Politikreds.CodecEncodeSelf(e)
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			x.Postnummer.CodecEncodeSelf(e)
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Postnummer"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			x.Postnummer.CodecEncodeSelf(e)
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			x.Region.CodecEncodeSelf(e)
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Region"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			x.Region.CodecEncodeSelf(e)
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			x.Retskreds.CodecEncodeSelf(e)
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Retskreds"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			x.Retskreds.CodecEncodeSelf(e)
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			x.Sogn.CodecEncodeSelf(e)
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Sogn"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			x.Sogn.CodecEncodeSelf(e)
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Status))
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Status"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Status))
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.SupplerendeBynavn))
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("SupplerendeBynavn"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.SupplerendeBynavn))
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			x.Vejstykke.CodecEncodeSelf(e)
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Vejstykke"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			x.Vejstykke.CodecEncodeSelf(e)
		}
		if yyr51 || z.EncBasicHandle().StructToArray {
			if yysep51 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Zone))
		} else {
			if yysep51 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Zone"))
			if yysep51 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Zone))
		}
		if yysep51 {
			if yyr51 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *AdgangsAdresse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl73 := r.ReadMapStart()
		if yyl73 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl73, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl73 := r.ReadArrayStart()
		if yyl73 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl73, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *AdgangsAdresse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys74Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys74Slc
	var yyhl74 bool = l >= 0
	for yyj74 := 0; ; yyj74++ {
		if yyhl74 {
			if yyj74 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj74 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys74Slc = r.DecodeBytes(yys74Slc, true, true)
		yys74 := string(yys74Slc)
		if !yyhl74 {
			r.ReadMapKVSeparator()
		}
		switch yys74 {
		case "DDKN":
			if r.TryDecodeAsNil() {
				x.DDKN = DDKN{}
			} else {
				yyv75 := &x.DDKN
				yyv75.CodecDecodeSelf(d)
			}
		case "adgangspunkt":
			if r.TryDecodeAsNil() {
				x.Adgangspunkt = Adgangspunkt{}
			} else {
				yyv76 := &x.Adgangspunkt
				yyv76.CodecDecodeSelf(d)
			}
		case "ejerlav":
			if r.TryDecodeAsNil() {
				x.Ejerlav = Ejerlav{}
			} else {
				yyv77 := &x.Ejerlav
				yyv77.CodecDecodeSelf(d)
			}
		case "esrejendomsnr":
			if r.TryDecodeAsNil() {
				x.EsrEjendomsNr = ""
			} else {
				x.EsrEjendomsNr = r.DecodeString()
			}
		case "historik":
			if r.TryDecodeAsNil() {
				x.Historik = Historik{}
			} else {
				yyv79 := &x.Historik
				yyv79.CodecDecodeSelf(d)
			}
		case "href":
			if r.TryDecodeAsNil() {
				x.Href = ""
			} else {
				x.Href = r.DecodeString()
			}
		case "husnr":
			if r.TryDecodeAsNil() {
				x.Husnr = ""
			} else {
				x.Husnr = r.DecodeString()
			}
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				x.ID = r.DecodeString()
			}
		case "kommune":
			if r.TryDecodeAsNil() {
				x.Kommune = Kommune{}
			} else {
				yyv83 := &x.Kommune
				yyv83.CodecDecodeSelf(d)
			}
		case "kvh":
			if r.TryDecodeAsNil() {
				x.Kvh = ""
			} else {
				x.Kvh = r.DecodeString()
			}
		case "matrikelnr":
			if r.TryDecodeAsNil() {
				x.Matrikelnr = ""
			} else {
				x.Matrikelnr = r.DecodeString()
			}
		case "opstillingskreds":
			if r.TryDecodeAsNil() {
				x.Opstillingskreds = Opstillingskreds{}
			} else {
				yyv86 := &x.Opstillingskreds
				yyv86.CodecDecodeSelf(d)
			}
		case "politikreds":
			if r.TryDecodeAsNil() {
				x.Politikreds = Politikreds{}
			} else {
				yyv87 := &x.Politikreds
				yyv87.CodecDecodeSelf(d)
			}
		case "postnummer":
			if r.TryDecodeAsNil() {
				x.Postnummer = PostnummerRef{}
			} else {
				yyv88 := &x.Postnummer
				yyv88.CodecDecodeSelf(d)
			}
		case "region":
			if r.TryDecodeAsNil() {
				x.Region = Region{}
			} else {
				yyv89 := &x.Region
				yyv89.CodecDecodeSelf(d)
			}
		case "retskreds":
			if r.TryDecodeAsNil() {
				x.Retskreds = Retskreds{}
			} else {
				yyv90 := &x.Retskreds
				yyv90.CodecDecodeSelf(d)
			}
		case "sogn":
			if r.TryDecodeAsNil() {
				x.Sogn = Sogn{}
			} else {
				yyv91 := &x.Sogn
				yyv91.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = 0
			} else {
				x.Status = int(r.DecodeInt(codecSelferBitsize1474))
			}
		case "supplerendebynavn":
			if r.TryDecodeAsNil() {
				x.SupplerendeBynavn = ""
			} else {
				x.SupplerendeBynavn = r.DecodeString()
			}
		case "vejstykke":
			if r.TryDecodeAsNil() {
				x.Vejstykke = VejstykkeRef{}
			} else {
				yyv94 := &x.Vejstykke
				yyv94.CodecDecodeSelf(d)
			}
		case "zone":
			if r.TryDecodeAsNil() {
				x.Zone = ""
			} else {
				x.Zone = r.DecodeString()
			}
		default:
			z.DecStructFieldNotFound(-1, yys74)
		} // end switch yys74
	} // end for yyj74
	if !yyhl74 {
		r.ReadMapEnd()
	}
}

func (x *AdgangsAdresse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj96 int
	var yyb96 bool
	var yyhl96 bool = l >= 0
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DDKN = DDKN{}
	} else {
		yyv97 := &x.DDKN
		yyv97.CodecDecodeSelf(d)
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Adgangspunkt = Adgangspunkt{}
	} else {
		yyv98 := &x.Adgangspunkt
		yyv98.CodecDecodeSelf(d)
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Ejerlav = Ejerlav{}
	} else {
		yyv99 := &x.Ejerlav
		yyv99.CodecDecodeSelf(d)
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.EsrEjendomsNr = ""
	} else {
		x.EsrEjendomsNr = r.DecodeString()
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Historik = Historik{}
	} else {
		yyv101 := &x.Historik
		yyv101.CodecDecodeSelf(d)
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Href = ""
	} else {
		x.Href = r.DecodeString()
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Husnr = ""
	} else {
		x.Husnr = r.DecodeString()
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		x.ID = r.DecodeString()
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Kommune = Kommune{}
	} else {
		yyv105 := &x.Kommune
		yyv105.CodecDecodeSelf(d)
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Kvh = ""
	} else {
		x.Kvh = r.DecodeString()
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Matrikelnr = ""
	} else {
		x.Matrikelnr = r.DecodeString()
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Opstillingskreds = Opstillingskreds{}
	} else {
		yyv108 := &x.Opstillingskreds
		yyv108.CodecDecodeSelf(d)
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Politikreds = Politikreds{}
	} else {
		yyv109 := &x.Politikreds
		yyv109.CodecDecodeSelf(d)
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Postnummer = PostnummerRef{}
	} else {
		yyv110 := &x.Postnummer
		yyv110.CodecDecodeSelf(d)
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Region = Region{}
	} else {
		yyv111 := &x.Region
		yyv111.CodecDecodeSelf(d)
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Retskreds = Retskreds{}
	} else {
		yyv112 := &x.Retskreds
		yyv112.CodecDecodeSelf(d)
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Sogn = Sogn{}
	} else {
		yyv113 := &x.Sogn
		yyv113.CodecDecodeSelf(d)
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = 0
	} else {
		x.Status = int(r.DecodeInt(codecSelferBitsize1474))
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SupplerendeBynavn = ""
	} else {
		x.SupplerendeBynavn = r.DecodeString()
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Vejstykke = VejstykkeRef{}
	} else {
		yyv116 := &x.Vejstykke
		yyv116.CodecDecodeSelf(d)
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Zone = ""
	} else {
		x.Zone = r.DecodeString()
	}
	for {
		yyj96++
		if yyhl96 {
			yyb96 = yyj96 > l
		} else {
			yyb96 = r.CheckBreak()
		}
		if yyb96 {
			break
		}
		if yyj96 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj96-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DDKN) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep118 := !z.EncBinary()
		const yyr118 bool = false
		var yyq118 [3]bool
		if yyr118 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(3)
		} else {
			var yynn118 int = 3
			for _, b := range yyq118 {
				if b {
					yynn118++
				}
			}
			r.EncodeMapStart(yynn118)
		}
		if yyr118 || z.EncBasicHandle().StructToArray {
			r.EncodeString(codecSelferC_UTF81474, string(x.Km1))
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("Km1"))
			if yysep118 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Km1))
		}
		if yyr118 || z.EncBasicHandle().StructToArray {
			if yysep118 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Km10))
		} else {
			if yysep118 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Km10"))
			if yysep118 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Km10))
		}
		if yyr118 || z.EncBasicHandle().StructToArray {
			if yysep118 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.M100))
		} else {
			if yysep118 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("M100"))
			if yysep118 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.M100))
		}
		if yysep118 {
			if yyr118 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *DDKN) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl122 := r.ReadMapStart()
		if yyl122 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl122, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl122 := r.ReadArrayStart()
		if yyl122 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl122, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *DDKN) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys123Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys123Slc
	var yyhl123 bool = l >= 0
	for yyj123 := 0; ; yyj123++ {
		if yyhl123 {
			if yyj123 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj123 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys123Slc = r.DecodeBytes(yys123Slc, true, true)
		yys123 := string(yys123Slc)
		if !yyhl123 {
			r.ReadMapKVSeparator()
		}
		switch yys123 {
		case "km1":
			if r.TryDecodeAsNil() {
				x.Km1 = ""
			} else {
				x.Km1 = r.DecodeString()
			}
		case "km10":
			if r.TryDecodeAsNil() {
				x.Km10 = ""
			} else {
				x.Km10 = r.DecodeString()
			}
		case "m100":
			if r.TryDecodeAsNil() {
				x.M100 = ""
			} else {
				x.M100 = r.DecodeString()
			}
		default:
			z.DecStructFieldNotFound(-1, yys123)
		} // end switch yys123
	} // end for yyj123
	if !yyhl123 {
		r.ReadMapEnd()
	}
}

func (x *DDKN) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj127 int
	var yyb127 bool
	var yyhl127 bool = l >= 0
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Km1 = ""
	} else {
		x.Km1 = r.DecodeString()
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Km10 = ""
	} else {
		x.Km10 = r.DecodeString()
	}
	yyj127++
	if yyhl127 {
		yyb127 = yyj127 > l
	} else {
		yyb127 = r.CheckBreak()
	}
	if yyb127 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.M100 = ""
	} else {
		x.M100 = r.DecodeString()
	}
	for {
		yyj127++
		if yyhl127 {
			yyb127 = yyj127 > l
		} else {
			yyb127 = r.CheckBreak()
		}
		if yyb127 {
			break
		}
		if yyj127 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj127-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Adgangspunkt) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep131 := !z.EncBinary()
		const yyr131 bool = false
		var yyq131 [6]bool
		if yyr131 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(6)
		} else {
			var yynn131 int = 6
			for _, b := range yyq131 {
				if b {
					yynn131++
				}
			}
			r.EncodeMapStart(yynn131)
		}
		if yyr131 || z.EncBasicHandle().StructToArray {
			r.EncodeInt(int64(x.Kilde))
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("Kilde"))
			if yysep131 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Kilde))
		}
		if yyr131 || z.EncBasicHandle().StructToArray {
			if yysep131 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Koordinater == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceFloat64V(x.Koordinater, false, e)
			}
		} else {
			if yysep131 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Koordinater"))
			if yysep131 {
				r.EncodeMapKVSeparator()
			}
			if x.Koordinater == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceFloat64V(x.Koordinater, false, e)
			}
		}
		if yyr131 || z.EncBasicHandle().StructToArray {
			if yysep131 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Nøjagtighed))
		} else {
			if yysep131 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Nøjagtighed"))
			if yysep131 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Nøjagtighed))
		}
		if yyr131 || z.EncBasicHandle().StructToArray {
			if yysep131 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Tekniskstandard))
		} else {
			if yysep131 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Tekniskstandard"))
			if yysep131 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Tekniskstandard))
		}
		if yyr131 || z.EncBasicHandle().StructToArray {
			if yysep131 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeFloat64(float64(x.Tekstretning))
		} else {
			if yysep131 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Tekstretning"))
			if yysep131 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeFloat64(float64(x.Tekstretning))
		}
		if yyr131 || z.EncBasicHandle().StructToArray {
			if yysep131 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(x.Ændret)
		} else {
			if yysep131 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Ændret"))
			if yysep131 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.Ændret)
		}
		if yysep131 {
			if yyr131 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Adgangspunkt) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl138 := r.ReadMapStart()
		if yyl138 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl138, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl138 := r.ReadArrayStart()
		if yyl138 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl138, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *Adgangspunkt) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys139Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys139Slc
	var yyhl139 bool = l >= 0
	for yyj139 := 0; ; yyj139++ {
		if yyhl139 {
			if yyj139 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj139 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys139Slc = r.DecodeBytes(yys139Slc, true, true)
		yys139 := string(yys139Slc)
		if !yyhl139 {
			r.ReadMapKVSeparator()
		}
		switch yys139 {
		case "kilde":
			if r.TryDecodeAsNil() {
				x.Kilde = 0
			} else {
				x.Kilde = int(r.DecodeInt(codecSelferBitsize1474))
			}
		case "koordinater":
			if r.TryDecodeAsNil() {
				x.Koordinater = nil
			} else {
				yyv141 := &x.Koordinater
				z.F.DecSliceFloat64X(yyv141, false, d)
			}
		case "nøjagtighed":
			if r.TryDecodeAsNil() {
				x.Nøjagtighed = ""
			} else {
				x.Nøjagtighed = r.DecodeString()
			}
		case "tekniskstandard":
			if r.TryDecodeAsNil() {
				x.Tekniskstandard = ""
			} else {
				x.Tekniskstandard = r.DecodeString()
			}
		case "tekstretning":
			if r.TryDecodeAsNil() {
				x.Tekstretning = 0
			} else {
				x.Tekstretning = float64(r.DecodeFloat(false))
			}
		case "ændret":
			if r.TryDecodeAsNil() {
				x.Ændret = AwsTime{}
			} else {
				yyv145 := &x.Ændret
				z.DecFallback(yyv145, false)
			}
		default:
			z.DecStructFieldNotFound(-1, yys139)
		} // end switch yys139
	} // end for yyj139
	if !yyhl139 {
		r.ReadMapEnd()
	}
}

func (x *Adgangspunkt) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj146 int
	var yyb146 bool
	var yyhl146 bool = l >= 0
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kilde = 0
	} else {
		x.Kilde = int(r.DecodeInt(codecSelferBitsize1474))
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Koordinater = nil
	} else {
		yyv148 := &x.Koordinater
		z.F.DecSliceFloat64X(yyv148, false, d)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Nøjagtighed = ""
	} else {
		x.Nøjagtighed = r.DecodeString()
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Tekniskstandard = ""
	} else {
		x.Tekniskstandard = r.DecodeString()
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Tekstretning = 0
	} else {
		x.Tekstretning = float64(r.DecodeFloat(false))
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Ændret = AwsTime{}
	} else {
		yyv152 := &x.Ændret
		z.DecFallback(yyv152, false)
	}
	for {
		yyj146++
		if yyhl146 {
			yyb146 = yyj146 > l
		} else {
			yyb146 = r.CheckBreak()
		}
		if yyb146 {
			break
		}
		if yyj146 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj146-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Ejerlav) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep153 := !z.EncBinary()
		const yyr153 bool = false
		var yyq153 [2]bool
		if yyr153 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(2)
		} else {
			var yynn153 int = 2
			for _, b := range yyq153 {
				if b {
					yynn153++
				}
			}
			r.EncodeMapStart(yynn153)
		}
		if yyr153 || z.EncBasicHandle().StructToArray {
			r.EncodeInt(int64(x.Kode))
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("Kode"))
			if yysep153 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Kode))
		}
		if yyr153 || z.EncBasicHandle().StructToArray {
			if yysep153 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		} else {
			if yysep153 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Navn"))
			if yysep153 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		}
		if yysep153 {
			if yyr153 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Ejerlav) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl156 := r.ReadMapStart()
		if yyl156 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl156, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl156 := r.ReadArrayStart()
		if yyl156 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl156, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *Ejerlav) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys157Slc
	var yyhl157 bool = l >= 0
	for yyj157 := 0; ; yyj157++ {
		if yyhl157 {
			if yyj157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj157 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys157Slc = r.DecodeBytes(yys157Slc, true, true)
		yys157 := string(yys157Slc)
		if !yyhl157 {
			r.ReadMapKVSeparator()
		}
		switch yys157 {
		case "kode":
			if r.TryDecodeAsNil() {
				x.Kode = 0
			} else {
				x.Kode = int(r.DecodeInt(codecSelferBitsize1474))
			}
		case "navn":
			if r.TryDecodeAsNil() {
				x.Navn = ""
			} else {
				x.Navn = r.DecodeString()
			}
		default:
			z.DecStructFieldNotFound(-1, yys157)
		} // end switch yys157
	} // end for yyj157
	if !yyhl157 {
		r.ReadMapEnd()
	}
}

func (x *Ejerlav) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj160 int
	var yyb160 bool
	var yyhl160 bool = l >= 0
	yyj160++
	if yyhl160 {
		yyb160 = yyj160 > l
	} else {
		yyb160 = r.CheckBreak()
	}
	if yyb160 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kode = 0
	} else {
		x.Kode = int(r.DecodeInt(codecSelferBitsize1474))
	}
	yyj160++
	if yyhl160 {
		yyb160 = yyj160 > l
	} else {
		yyb160 = r.CheckBreak()
	}
	if yyb160 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Navn = ""
	} else {
		x.Navn = r.DecodeString()
	}
	for {
		yyj160++
		if yyhl160 {
			yyb160 = yyj160 > l
		} else {
			yyb160 = r.CheckBreak()
		}
		if yyb160 {
			break
		}
		if yyj160 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj160-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Historik) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep163 := !z.EncBinary()
		const yyr163 bool = false
		var yyq163 [2]bool
		if yyr163 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(2)
		} else {
			var yynn163 int = 2
			for _, b := range yyq163 {
				if b {
					yynn163++
				}
			}
			r.EncodeMapStart(yynn163)
		}
		if yyr163 || z.EncBasicHandle().StructToArray {
			z.EncFallback(x.Oprettet)
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("Oprettet"))
			if yysep163 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.Oprettet)
		}
		if yyr163 || z.EncBasicHandle().StructToArray {
			if yysep163 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(x.Ændret)
		} else {
			if yysep163 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Ændret"))
			if yysep163 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.Ændret)
		}
		if yysep163 {
			if yyr163 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Historik) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl166 := r.ReadMapStart()
		if yyl166 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl166, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl166 := r.ReadArrayStart()
		if yyl166 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl166, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *Historik) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys167Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys167Slc
	var yyhl167 bool = l >= 0
	for yyj167 := 0; ; yyj167++ {
		if yyhl167 {
			if yyj167 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj167 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys167Slc = r.DecodeBytes(yys167Slc, true, true)
		yys167 := string(yys167Slc)
		if !yyhl167 {
			r.ReadMapKVSeparator()
		}
		switch yys167 {
		case "oprettet":
			if r.TryDecodeAsNil() {
				x.Oprettet = AwsTime{}
			} else {
				yyv168 := &x.Oprettet
				z.DecFallback(yyv168, false)
			}
		case "ændret":
			if r.TryDecodeAsNil() {
				x.Ændret = AwsTime{}
			} else {
				yyv169 := &x.Ændret
				z.DecFallback(yyv169, false)
			}
		default:
			z.DecStructFieldNotFound(-1, yys167)
		} // end switch yys167
	} // end for yyj167
	if !yyhl167 {
		r.ReadMapEnd()
	}
}

func (x *Historik) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj170 int
	var yyb170 bool
	var yyhl170 bool = l >= 0
	yyj170++
	if yyhl170 {
		yyb170 = yyj170 > l
	} else {
		yyb170 = r.CheckBreak()
	}
	if yyb170 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Oprettet = AwsTime{}
	} else {
		yyv171 := &x.Oprettet
		z.DecFallback(yyv171, false)
	}
	yyj170++
	if yyhl170 {
		yyb170 = yyj170 > l
	} else {
		yyb170 = r.CheckBreak()
	}
	if yyb170 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Ændret = AwsTime{}
	} else {
		yyv172 := &x.Ændret
		z.DecFallback(yyv172, false)
	}
	for {
		yyj170++
		if yyhl170 {
			yyb170 = yyj170 > l
		} else {
			yyb170 = r.CheckBreak()
		}
		if yyb170 {
			break
		}
		if yyj170 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj170-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Kommune) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep173 := !z.EncBinary()
		const yyr173 bool = false
		var yyq173 [3]bool
		if yyr173 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(3)
		} else {
			var yynn173 int = 3
			for _, b := range yyq173 {
				if b {
					yynn173++
				}
			}
			r.EncodeMapStart(yynn173)
		}
		if yyr173 || z.EncBasicHandle().StructToArray {
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("Href"))
			if yysep173 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		}
		if yyr173 || z.EncBasicHandle().StructToArray {
			if yysep173 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		} else {
			if yysep173 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Kode"))
			if yysep173 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		}
		if yyr173 || z.EncBasicHandle().StructToArray {
			if yysep173 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		} else {
			if yysep173 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Navn"))
			if yysep173 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		}
		if yysep173 {
			if yyr173 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Kommune) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl177 := r.ReadMapStart()
		if yyl177 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl177, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl177 := r.ReadArrayStart()
		if yyl177 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl177, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *Kommune) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys178Slc
	var yyhl178 bool = l >= 0
	for yyj178 := 0; ; yyj178++ {
		if yyhl178 {
			if yyj178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj178 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys178Slc = r.DecodeBytes(yys178Slc, true, true)
		yys178 := string(yys178Slc)
		if !yyhl178 {
			r.ReadMapKVSeparator()
		}
		switch yys178 {
		case "href":
			if r.TryDecodeAsNil() {
				x.Href = ""
			} else {
				x.Href = r.DecodeString()
			}
		case "kode":
			if r.TryDecodeAsNil() {
				x.Kode = ""
			} else {
				x.Kode = r.DecodeString()
			}
		case "navn":
			if r.TryDecodeAsNil() {
				x.Navn = ""
			} else {
				x.Navn = r.DecodeString()
			}
		default:
			z.DecStructFieldNotFound(-1, yys178)
		} // end switch yys178
	} // end for yyj178
	if !yyhl178 {
		r.ReadMapEnd()
	}
}

func (x *Kommune) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj182 int
	var yyb182 bool
	var yyhl182 bool = l >= 0
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Href = ""
	} else {
		x.Href = r.DecodeString()
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Kode = ""
	} else {
		x.Kode = r.DecodeString()
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Navn = ""
	} else {
		x.Navn = r.DecodeString()
	}
	for {
		yyj182++
		if yyhl182 {
			yyb182 = yyj182 > l
		} else {
			yyb182 = r.CheckBreak()
		}
		if yyb182 {
			break
		}
		if yyj182 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj182-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Opstillingskreds) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep186 := !z.EncBinary()
		const yyr186 bool = false
		var yyq186 [3]bool
		if yyr186 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(3)
		} else {
			var yynn186 int = 3
			for _, b := range yyq186 {
				if b {
					yynn186++
				}
			}
			r.EncodeMapStart(yynn186)
		}
		if yyr186 || z.EncBasicHandle().StructToArray {
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("Href"))
			if yysep186 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		}
		if yyr186 || z.EncBasicHandle().StructToArray {
			if yysep186 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		} else {
			if yysep186 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Kode"))
			if yysep186 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		}
		if yyr186 || z.EncBasicHandle().StructToArray {
			if yysep186 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		} else {
			if yysep186 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Navn"))
			if yysep186 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		}
		if yysep186 {
			if yyr186 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Opstillingskreds) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl190 := r.ReadMapStart()
		if yyl190 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl190, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl190 := r.ReadArrayStart()
		if yyl190 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl190, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *Opstillingskreds) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys191Slc
	var yyhl191 bool = l >= 0
	for yyj191 := 0; ; yyj191++ {
		if yyhl191 {
			if yyj191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj191 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys191Slc = r.DecodeBytes(yys191Slc, true, true)
		yys191 := string(yys191Slc)
		if !yyhl191 {
			r.ReadMapKVSeparator()
		}
		switch yys191 {
		case "href":
			if r.TryDecodeAsNil() {
				x.Href = ""
			} else {
				x.Href = r.DecodeString()
			}
		case "kode":
			if r.TryDecodeAsNil() {
				x.Kode = ""
			} else {
				x.Kode = r.DecodeString()
			}
		case "navn":
			if r.TryDecodeAsNil() {
				x.Navn = ""
			} else {
				x.Navn = r.DecodeString()
			}
		default:
			z.DecStructFieldNotFound(-1, yys191)
		} // end switch yys191
	} // end for yyj191
	if !yyhl191 {
		r.ReadMapEnd()
	}
}

func (x *Opstillingskreds) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj195 int
	var yyb195 bool
	var yyhl195 bool = l >= 0
	yyj195++
	if yyhl195 {
		yyb195 = yyj195 > l
	} else {
		yyb195 = r.CheckBreak()
	}
	if yyb195 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Href = ""
	} else {
		x.Href = r.DecodeString()
	}
	yyj195++
	if yyhl195 {
		yyb195 = yyj195 > l
	} else {
		yyb195 = r.CheckBreak()
	}
	if yyb195 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Kode = ""
	} else {
		x.Kode = r.DecodeString()
	}
	yyj195++
	if yyhl195 {
		yyb195 = yyj195 > l
	} else {
		yyb195 = r.CheckBreak()
	}
	if yyb195 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Navn = ""
	} else {
		x.Navn = r.DecodeString()
	}
	for {
		yyj195++
		if yyhl195 {
			yyb195 = yyj195 > l
		} else {
			yyb195 = r.CheckBreak()
		}
		if yyb195 {
			break
		}
		if yyj195 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj195-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Politikreds) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep199 := !z.EncBinary()
		const yyr199 bool = false
		var yyq199 [3]bool
		if yyr199 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(3)
		} else {
			var yynn199 int = 3
			for _, b := range yyq199 {
				if b {
					yynn199++
				}
			}
			r.EncodeMapStart(yynn199)
		}
		if yyr199 || z.EncBasicHandle().StructToArray {
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("Href"))
			if yysep199 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		}
		if yyr199 || z.EncBasicHandle().StructToArray {
			if yysep199 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		} else {
			if yysep199 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Kode"))
			if yysep199 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		}
		if yyr199 || z.EncBasicHandle().StructToArray {
			if yysep199 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		} else {
			if yysep199 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Navn"))
			if yysep199 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		}
		if yysep199 {
			if yyr199 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Politikreds) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl203 := r.ReadMapStart()
		if yyl203 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl203, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl203 := r.ReadArrayStart()
		if yyl203 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl203, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *Politikreds) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys204Slc
	var yyhl204 bool = l >= 0
	for yyj204 := 0; ; yyj204++ {
		if yyhl204 {
			if yyj204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj204 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys204Slc = r.DecodeBytes(yys204Slc, true, true)
		yys204 := string(yys204Slc)
		if !yyhl204 {
			r.ReadMapKVSeparator()
		}
		switch yys204 {
		case "href":
			if r.TryDecodeAsNil() {
				x.Href = ""
			} else {
				x.Href = r.DecodeString()
			}
		case "kode":
			if r.TryDecodeAsNil() {
				x.Kode = ""
			} else {
				x.Kode = r.DecodeString()
			}
		case "navn":
			if r.TryDecodeAsNil() {
				x.Navn = ""
			} else {
				x.Navn = r.DecodeString()
			}
		default:
			z.DecStructFieldNotFound(-1, yys204)
		} // end switch yys204
	} // end for yyj204
	if !yyhl204 {
		r.ReadMapEnd()
	}
}

func (x *Politikreds) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj208 int
	var yyb208 bool
	var yyhl208 bool = l >= 0
	yyj208++
	if yyhl208 {
		yyb208 = yyj208 > l
	} else {
		yyb208 = r.CheckBreak()
	}
	if yyb208 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Href = ""
	} else {
		x.Href = r.DecodeString()
	}
	yyj208++
	if yyhl208 {
		yyb208 = yyj208 > l
	} else {
		yyb208 = r.CheckBreak()
	}
	if yyb208 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Kode = ""
	} else {
		x.Kode = r.DecodeString()
	}
	yyj208++
	if yyhl208 {
		yyb208 = yyj208 > l
	} else {
		yyb208 = r.CheckBreak()
	}
	if yyb208 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Navn = ""
	} else {
		x.Navn = r.DecodeString()
	}
	for {
		yyj208++
		if yyhl208 {
			yyb208 = yyj208 > l
		} else {
			yyb208 = r.CheckBreak()
		}
		if yyb208 {
			break
		}
		if yyj208 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj208-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PostnummerRef) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep212 := !z.EncBinary()
		const yyr212 bool = false
		var yyq212 [3]bool
		if yyr212 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(3)
		} else {
			var yynn212 int = 3
			for _, b := range yyq212 {
				if b {
					yynn212++
				}
			}
			r.EncodeMapStart(yynn212)
		}
		if yyr212 || z.EncBasicHandle().StructToArray {
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("Href"))
			if yysep212 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		}
		if yyr212 || z.EncBasicHandle().StructToArray {
			if yysep212 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		} else {
			if yysep212 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Navn"))
			if yysep212 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		}
		if yyr212 || z.EncBasicHandle().StructToArray {
			if yysep212 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Nr))
		} else {
			if yysep212 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Nr"))
			if yysep212 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Nr))
		}
		if yysep212 {
			if yyr212 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *PostnummerRef) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl216 := r.ReadMapStart()
		if yyl216 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl216, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl216 := r.ReadArrayStart()
		if yyl216 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl216, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *PostnummerRef) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys217Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys217Slc
	var yyhl217 bool = l >= 0
	for yyj217 := 0; ; yyj217++ {
		if yyhl217 {
			if yyj217 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj217 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys217Slc = r.DecodeBytes(yys217Slc, true, true)
		yys217 := string(yys217Slc)
		if !yyhl217 {
			r.ReadMapKVSeparator()
		}
		switch yys217 {
		case "href":
			if r.TryDecodeAsNil() {
				x.Href = ""
			} else {
				x.Href = r.DecodeString()
			}
		case "navn":
			if r.TryDecodeAsNil() {
				x.Navn = ""
			} else {
				x.Navn = r.DecodeString()
			}
		case "nr":
			if r.TryDecodeAsNil() {
				x.Nr = ""
			} else {
				x.Nr = r.DecodeString()
			}
		default:
			z.DecStructFieldNotFound(-1, yys217)
		} // end switch yys217
	} // end for yyj217
	if !yyhl217 {
		r.ReadMapEnd()
	}
}

func (x *PostnummerRef) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj221 int
	var yyb221 bool
	var yyhl221 bool = l >= 0
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Href = ""
	} else {
		x.Href = r.DecodeString()
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Navn = ""
	} else {
		x.Navn = r.DecodeString()
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Nr = ""
	} else {
		x.Nr = r.DecodeString()
	}
	for {
		yyj221++
		if yyhl221 {
			yyb221 = yyj221 > l
		} else {
			yyb221 = r.CheckBreak()
		}
		if yyb221 {
			break
		}
		if yyj221 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj221-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Region) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep225 := !z.EncBinary()
		const yyr225 bool = false
		var yyq225 [3]bool
		if yyr225 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(3)
		} else {
			var yynn225 int = 3
			for _, b := range yyq225 {
				if b {
					yynn225++
				}
			}
			r.EncodeMapStart(yynn225)
		}
		if yyr225 || z.EncBasicHandle().StructToArray {
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("Href"))
			if yysep225 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		}
		if yyr225 || z.EncBasicHandle().StructToArray {
			if yysep225 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		} else {
			if yysep225 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Kode"))
			if yysep225 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		}
		if yyr225 || z.EncBasicHandle().StructToArray {
			if yysep225 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		} else {
			if yysep225 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Navn"))
			if yysep225 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		}
		if yysep225 {
			if yyr225 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Region) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl229 := r.ReadMapStart()
		if yyl229 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl229, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl229 := r.ReadArrayStart()
		if yyl229 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl229, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *Region) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys230Slc
	var yyhl230 bool = l >= 0
	for yyj230 := 0; ; yyj230++ {
		if yyhl230 {
			if yyj230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj230 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys230Slc = r.DecodeBytes(yys230Slc, true, true)
		yys230 := string(yys230Slc)
		if !yyhl230 {
			r.ReadMapKVSeparator()
		}
		switch yys230 {
		case "href":
			if r.TryDecodeAsNil() {
				x.Href = ""
			} else {
				x.Href = r.DecodeString()
			}
		case "kode":
			if r.TryDecodeAsNil() {
				x.Kode = ""
			} else {
				x.Kode = r.DecodeString()
			}
		case "navn":
			if r.TryDecodeAsNil() {
				x.Navn = ""
			} else {
				x.Navn = r.DecodeString()
			}
		default:
			z.DecStructFieldNotFound(-1, yys230)
		} // end switch yys230
	} // end for yyj230
	if !yyhl230 {
		r.ReadMapEnd()
	}
}

func (x *Region) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj234 int
	var yyb234 bool
	var yyhl234 bool = l >= 0
	yyj234++
	if yyhl234 {
		yyb234 = yyj234 > l
	} else {
		yyb234 = r.CheckBreak()
	}
	if yyb234 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Href = ""
	} else {
		x.Href = r.DecodeString()
	}
	yyj234++
	if yyhl234 {
		yyb234 = yyj234 > l
	} else {
		yyb234 = r.CheckBreak()
	}
	if yyb234 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Kode = ""
	} else {
		x.Kode = r.DecodeString()
	}
	yyj234++
	if yyhl234 {
		yyb234 = yyj234 > l
	} else {
		yyb234 = r.CheckBreak()
	}
	if yyb234 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Navn = ""
	} else {
		x.Navn = r.DecodeString()
	}
	for {
		yyj234++
		if yyhl234 {
			yyb234 = yyj234 > l
		} else {
			yyb234 = r.CheckBreak()
		}
		if yyb234 {
			break
		}
		if yyj234 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj234-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Retskreds) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep238 := !z.EncBinary()
		const yyr238 bool = false
		var yyq238 [3]bool
		if yyr238 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(3)
		} else {
			var yynn238 int = 3
			for _, b := range yyq238 {
				if b {
					yynn238++
				}
			}
			r.EncodeMapStart(yynn238)
		}
		if yyr238 || z.EncBasicHandle().StructToArray {
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("Href"))
			if yysep238 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		}
		if yyr238 || z.EncBasicHandle().StructToArray {
			if yysep238 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		} else {
			if yysep238 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Kode"))
			if yysep238 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		}
		if yyr238 || z.EncBasicHandle().StructToArray {
			if yysep238 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		} else {
			if yysep238 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Navn"))
			if yysep238 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		}
		if yysep238 {
			if yyr238 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Retskreds) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl242 := r.ReadMapStart()
		if yyl242 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl242, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl242 := r.ReadArrayStart()
		if yyl242 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl242, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *Retskreds) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys243Slc
	var yyhl243 bool = l >= 0
	for yyj243 := 0; ; yyj243++ {
		if yyhl243 {
			if yyj243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj243 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys243Slc = r.DecodeBytes(yys243Slc, true, true)
		yys243 := string(yys243Slc)
		if !yyhl243 {
			r.ReadMapKVSeparator()
		}
		switch yys243 {
		case "href":
			if r.TryDecodeAsNil() {
				x.Href = ""
			} else {
				x.Href = r.DecodeString()
			}
		case "kode":
			if r.TryDecodeAsNil() {
				x.Kode = ""
			} else {
				x.Kode = r.DecodeString()
			}
		case "navn":
			if r.TryDecodeAsNil() {
				x.Navn = ""
			} else {
				x.Navn = r.DecodeString()
			}
		default:
			z.DecStructFieldNotFound(-1, yys243)
		} // end switch yys243
	} // end for yyj243
	if !yyhl243 {
		r.ReadMapEnd()
	}
}

func (x *Retskreds) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj247 int
	var yyb247 bool
	var yyhl247 bool = l >= 0
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Href = ""
	} else {
		x.Href = r.DecodeString()
	}
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Kode = ""
	} else {
		x.Kode = r.DecodeString()
	}
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Navn = ""
	} else {
		x.Navn = r.DecodeString()
	}
	for {
		yyj247++
		if yyhl247 {
			yyb247 = yyj247 > l
		} else {
			yyb247 = r.CheckBreak()
		}
		if yyb247 {
			break
		}
		if yyj247 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj247-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Sogn) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep251 := !z.EncBinary()
		const yyr251 bool = false
		var yyq251 [3]bool
		if yyr251 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(3)
		} else {
			var yynn251 int = 3
			for _, b := range yyq251 {
				if b {
					yynn251++
				}
			}
			r.EncodeMapStart(yynn251)
		}
		if yyr251 || z.EncBasicHandle().StructToArray {
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("Href"))
			if yysep251 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		}
		if yyr251 || z.EncBasicHandle().StructToArray {
			if yysep251 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		} else {
			if yysep251 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Kode"))
			if yysep251 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		}
		if yyr251 || z.EncBasicHandle().StructToArray {
			if yysep251 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		} else {
			if yysep251 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Navn"))
			if yysep251 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		}
		if yysep251 {
			if yyr251 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Sogn) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl255 := r.ReadMapStart()
		if yyl255 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl255, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl255 := r.ReadArrayStart()
		if yyl255 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl255, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *Sogn) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys256Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys256Slc
	var yyhl256 bool = l >= 0
	for yyj256 := 0; ; yyj256++ {
		if yyhl256 {
			if yyj256 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj256 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys256Slc = r.DecodeBytes(yys256Slc, true, true)
		yys256 := string(yys256Slc)
		if !yyhl256 {
			r.ReadMapKVSeparator()
		}
		switch yys256 {
		case "href":
			if r.TryDecodeAsNil() {
				x.Href = ""
			} else {
				x.Href = r.DecodeString()
			}
		case "kode":
			if r.TryDecodeAsNil() {
				x.Kode = ""
			} else {
				x.Kode = r.DecodeString()
			}
		case "navn":
			if r.TryDecodeAsNil() {
				x.Navn = ""
			} else {
				x.Navn = r.DecodeString()
			}
		default:
			z.DecStructFieldNotFound(-1, yys256)
		} // end switch yys256
	} // end for yyj256
	if !yyhl256 {
		r.ReadMapEnd()
	}
}

func (x *Sogn) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj260 int
	var yyb260 bool
	var yyhl260 bool = l >= 0
	yyj260++
	if yyhl260 {
		yyb260 = yyj260 > l
	} else {
		yyb260 = r.CheckBreak()
	}
	if yyb260 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Href = ""
	} else {
		x.Href = r.DecodeString()
	}
	yyj260++
	if yyhl260 {
		yyb260 = yyj260 > l
	} else {
		yyb260 = r.CheckBreak()
	}
	if yyb260 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Kode = ""
	} else {
		x.Kode = r.DecodeString()
	}
	yyj260++
	if yyhl260 {
		yyb260 = yyj260 > l
	} else {
		yyb260 = r.CheckBreak()
	}
	if yyb260 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Navn = ""
	} else {
		x.Navn = r.DecodeString()
	}
	for {
		yyj260++
		if yyhl260 {
			yyb260 = yyj260 > l
		} else {
			yyb260 = r.CheckBreak()
		}
		if yyb260 {
			break
		}
		if yyj260 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj260-1, "")
	}
	r.ReadArrayEnd()
}

func (x *VejstykkeRef) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep264 := !z.EncBinary()
		const yyr264 bool = false
		var yyq264 [3]bool
		if yyr264 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(3)
		} else {
			var yynn264 int = 3
			for _, b := range yyq264 {
				if b {
					yynn264++
				}
			}
			r.EncodeMapStart(yynn264)
		}
		if yyr264 || z.EncBasicHandle().StructToArray {
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("Href"))
			if yysep264 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		}
		if yyr264 || z.EncBasicHandle().StructToArray {
			if yysep264 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		} else {
			if yysep264 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Kode"))
			if yysep264 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		}
		if yyr264 || z.EncBasicHandle().StructToArray {
			if yysep264 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		} else {
			if yysep264 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Navn"))
			if yysep264 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		}
		if yysep264 {
			if yyr264 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *VejstykkeRef) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl268 := r.ReadMapStart()
		if yyl268 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl268, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl268 := r.ReadArrayStart()
		if yyl268 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl268, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *VejstykkeRef) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys269Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys269Slc
	var yyhl269 bool = l >= 0
	for yyj269 := 0; ; yyj269++ {
		if yyhl269 {
			if yyj269 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj269 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys269Slc = r.DecodeBytes(yys269Slc, true, true)
		yys269 := string(yys269Slc)
		if !yyhl269 {
			r.ReadMapKVSeparator()
		}
		switch yys269 {
		case "href":
			if r.TryDecodeAsNil() {
				x.Href = ""
			} else {
				x.Href = r.DecodeString()
			}
		case "kode":
			if r.TryDecodeAsNil() {
				x.Kode = ""
			} else {
				x.Kode = r.DecodeString()
			}
		case "navn":
			if r.TryDecodeAsNil() {
				x.Navn = ""
			} else {
				x.Navn = r.DecodeString()
			}
		default:
			z.DecStructFieldNotFound(-1, yys269)
		} // end switch yys269
	} // end for yyj269
	if !yyhl269 {
		r.ReadMapEnd()
	}
}

func (x *VejstykkeRef) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj273 int
	var yyb273 bool
	var yyhl273 bool = l >= 0
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Href = ""
	} else {
		x.Href = r.DecodeString()
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Kode = ""
	} else {
		x.Kode = r.DecodeString()
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Navn = ""
	} else {
		x.Navn = r.DecodeString()
	}
	for {
		yyj273++
		if yyhl273 {
			yyb273 = yyj273 > l
		} else {
			yyb273 = r.CheckBreak()
		}
		if yyb273 {
			break
		}
		if yyj273 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj273-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Vejstykke) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep277 := !z.EncBinary()
		const yyr277 bool = false
		var yyq277 [7]bool
		if yyr277 || z.EncBasicHandle().StructToArray {
			r.EncodeArrayStart(7)
		} else {
			var yynn277 int = 7
			for _, b := range yyq277 {
				if b {
					yynn277++
				}
			}
			r.EncodeMapStart(yynn277)
		}
		if yyr277 || z.EncBasicHandle().StructToArray {
			r.EncodeString(codecSelferC_UTF81474, string(x.Adresseringsnavn))
		} else {
			r.EncodeString(codecSelferC_UTF81474, string("Adresseringsnavn"))
			if yysep277 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Adresseringsnavn))
		}
		if yyr277 || z.EncBasicHandle().StructToArray {
			if yysep277 {
				r.EncodeArrayEntrySeparator()
			}
			x.Historik.CodecEncodeSelf(e)
		} else {
			if yysep277 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Historik"))
			if yysep277 {
				r.EncodeMapKVSeparator()
			}
			x.Historik.CodecEncodeSelf(e)
		}
		if yyr277 || z.EncBasicHandle().StructToArray {
			if yysep277 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		} else {
			if yysep277 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Href"))
			if yysep277 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Href))
		}
		if yyr277 || z.EncBasicHandle().StructToArray {
			if yysep277 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		} else {
			if yysep277 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Kode"))
			if yysep277 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Kode))
		}
		if yyr277 || z.EncBasicHandle().StructToArray {
			if yysep277 {
				r.EncodeArrayEntrySeparator()
			}
			x.Kommune.CodecEncodeSelf(e)
		} else {
			if yysep277 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Kommune"))
			if yysep277 {
				r.EncodeMapKVSeparator()
			}
			x.Kommune.CodecEncodeSelf(e)
		}
		if yyr277 || z.EncBasicHandle().StructToArray {
			if yysep277 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		} else {
			if yysep277 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Navn"))
			if yysep277 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string(x.Navn))
		}
		if yyr277 || z.EncBasicHandle().StructToArray {
			if yysep277 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Postnumre == nil {
				r.EncodeNil()
			} else {
				h.encSlicePostnummerRef([]PostnummerRef(x.Postnumre), e)
			}
		} else {
			if yysep277 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81474, string("Postnumre"))
			if yysep277 {
				r.EncodeMapKVSeparator()
			}
			if x.Postnumre == nil {
				r.EncodeNil()
			} else {
				h.encSlicePostnummerRef([]PostnummerRef(x.Postnumre), e)
			}
		}
		if yysep277 {
			if yyr277 || z.EncBasicHandle().StructToArray {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Vejstykke) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1474) {
		yyl285 := r.ReadMapStart()
		if yyl285 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl285, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1474) {
		yyl285 := r.ReadArrayStart()
		if yyl285 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl285, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1474)
	}
}

func (x *Vejstykke) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys286Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys286Slc
	var yyhl286 bool = l >= 0
	for yyj286 := 0; ; yyj286++ {
		if yyhl286 {
			if yyj286 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj286 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys286Slc = r.DecodeBytes(yys286Slc, true, true)
		yys286 := string(yys286Slc)
		if !yyhl286 {
			r.ReadMapKVSeparator()
		}
		switch yys286 {
		case "adresseringsnavn":
			if r.TryDecodeAsNil() {
				x.Adresseringsnavn = ""
			} else {
				x.Adresseringsnavn = r.DecodeString()
			}
		case "historik":
			if r.TryDecodeAsNil() {
				x.Historik = Historik{}
			} else {
				yyv288 := &x.Historik
				yyv288.CodecDecodeSelf(d)
			}
		case "href":
			if r.TryDecodeAsNil() {
				x.Href = ""
			} else {
				x.Href = r.DecodeString()
			}
		case "kode":
			if r.TryDecodeAsNil() {
				x.Kode = ""
			} else {
				x.Kode = r.DecodeString()
			}
		case "kommune":
			if r.TryDecodeAsNil() {
				x.Kommune = Kommune{}
			} else {
				yyv291 := &x.Kommune
				yyv291.CodecDecodeSelf(d)
			}
		case "navn":
			if r.TryDecodeAsNil() {
				x.Navn = ""
			} else {
				x.Navn = r.DecodeString()
			}
		case "postnumre":
			if r.TryDecodeAsNil() {
				x.Postnumre = nil
			} else {
				yyv293 := &x.Postnumre
				h.decSlicePostnummerRef((*[]PostnummerRef)(yyv293), d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys286)
		} // end switch yys286
	} // end for yyj286
	if !yyhl286 {
		r.ReadMapEnd()
	}
}

func (x *Vejstykke) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj294 int
	var yyb294 bool
	var yyhl294 bool = l >= 0
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Adresseringsnavn = ""
	} else {
		x.Adresseringsnavn = r.DecodeString()
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Historik = Historik{}
	} else {
		yyv296 := &x.Historik
		yyv296.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Href = ""
	} else {
		x.Href = r.DecodeString()
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Kode = ""
	} else {
		x.Kode = r.DecodeString()
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Kommune = Kommune{}
	} else {
		yyv299 := &x.Kommune
		yyv299.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Navn = ""
	} else {
		x.Navn = r.DecodeString()
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Postnumre = nil
	} else {
		yyv301 := &x.Postnumre
		h.decSlicePostnummerRef((*[]PostnummerRef)(yyv301), d)
	}
	for {
		yyj294++
		if yyhl294 {
			yyb294 = yyj294 > l
		} else {
			yyb294 = r.CheckBreak()
		}
		if yyb294 {
			break
		}
		if yyj294 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj294-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer1474) encSliceKommune(v []Kommune, e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys302 := !z.EncBinary()
	if yys302 {
		for yyi302, yyv302 := range v {
			if yyi302 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yyv302.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv302 := range v {
			yyv302.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1474) decSliceKommune(v *[]Kommune, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	const yyArr303 bool = false
	yyv303 := *v
	yyh303, yyl303 := z.DecSliceHelperStart()

	var yyc303 bool
	if yyv303 == nil {
		if yyl303 <= 0 {
			yyv303 = []Kommune{}
		} else {
			yyv303 = make([]Kommune, yyl303, yyl303)
		}
		yyc303 = true
	}

	if yyl303 == 0 {
		if len(yyv303) != 0 {
			yyv303 = yyv303[:0]
			yyc303 = true
		}
	} else if yyl303 > 0 {
		yyn303 := yyl303
		if yyl303 > cap(yyv303) {
			yyv303 = make([]Kommune, yyl303, yyl303)
			yyc303 = true

		} else if yyl303 != len(yyv303) {
			yyv303 = yyv303[:yyl303]
			yyc303 = true
		}
		yyj303 := 0
		for ; yyj303 < yyn303; yyj303++ {
			if r.TryDecodeAsNil() {
				yyv303[yyj303] = Kommune{}
			} else {
				yyv304 := &yyv303[yyj303]
				yyv304.CodecDecodeSelf(d)
			}

		}
	} else {
		for yyj303 := 0; !r.CheckBreak(); yyj303++ {
			if yyj303 >= len(yyv303) {
				yyv303 = append(yyv303, Kommune{}) // var yyz303 Kommune
				yyc303 = true
			}
			if yyj303 > 0 {
				yyh303.Sep(yyj303)
			}
			if yyj303 < len(yyv303) {
				if r.TryDecodeAsNil() {
					yyv303[yyj303] = Kommune{}
				} else {
					yyv305 := &yyv303[yyj303]
					yyv305.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}
		}
		yyh303.End()
	}
	if yyc303 {
		*v = yyv303
	}
}

func (x codecSelfer1474) encSlicePostnummerRef(v []PostnummerRef, e *codec1978.Encoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys306 := !z.EncBinary()
	if yys306 {
		for yyi306, yyv306 := range v {
			if yyi306 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yyv306.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv306 := range v {
			yyv306.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1474) decSlicePostnummerRef(v *[]PostnummerRef, d *codec1978.Decoder) {
	var h codecSelfer1474
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	const yyArr307 bool = false
	yyv307 := *v
	yyh307, yyl307 := z.DecSliceHelperStart()

	var yyc307 bool
	if yyv307 == nil {
		if yyl307 <= 0 {
			yyv307 = []PostnummerRef{}
		} else {
			yyv307 = make([]PostnummerRef, yyl307, yyl307)
		}
		yyc307 = true
	}

	if yyl307 == 0 {
		if len(yyv307) != 0 {
			yyv307 = yyv307[:0]
			yyc307 = true
		}
	} else if yyl307 > 0 {
		yyn307 := yyl307
		if yyl307 > cap(yyv307) {
			yyv307 = make([]PostnummerRef, yyl307, yyl307)
			yyc307 = true

		} else if yyl307 != len(yyv307) {
			yyv307 = yyv307[:yyl307]
			yyc307 = true
		}
		yyj307 := 0
		for ; yyj307 < yyn307; yyj307++ {
			if r.TryDecodeAsNil() {
				yyv307[yyj307] = PostnummerRef{}
			} else {
				yyv308 := &yyv307[yyj307]
				yyv308.CodecDecodeSelf(d)
			}

		}
	} else {
		for yyj307 := 0; !r.CheckBreak(); yyj307++ {
			if yyj307 >= len(yyv307) {
				yyv307 = append(yyv307, PostnummerRef{}) // var yyz307 PostnummerRef
				yyc307 = true
			}
			if yyj307 > 0 {
				yyh307.Sep(yyj307)
			}
			if yyj307 < len(yyv307) {
				if r.TryDecodeAsNil() {
					yyv307[yyj307] = PostnummerRef{}
				} else {
					yyv309 := &yyv307[yyj307]
					yyv309.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}
		}
		yyh307.End()
	}
	if yyc307 {
		*v = yyv307
	}
}
